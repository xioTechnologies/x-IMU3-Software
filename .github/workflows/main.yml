name: CI

on:
  push:
    branches: [ main ]
    tags: [ "*" ]
  pull_request:
    branches: [ main ]

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - if: startsWith(github.ref, 'refs/tags/v')
        name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  rust:
    runs-on: ${{ matrix.target[0] }}
    needs: create-release

    strategy:
      fail-fast: false
      matrix:
        target: # [ os, rust-target, library-file-name, library-file-extension ]
          - [ macos-latest, x86_64-apple-darwin, libximu3, a ]
          - [ macos-latest, aarch64-apple-darwin, libximu3, a ]
          - [ ubuntu-latest, i686-unknown-linux-gnu, libximu3, a ]
          - [ ubuntu-latest, aarch64-unknown-linux-gnu, libximu3, a ]
          - [ ubuntu-latest, x86_64-unknown-linux-gnu, libximu3, a ]
          - [ windows-latest, x86_64-pc-windows-gnu, libximu3, a ]
          - [ windows-latest, x86_64-pc-windows-msvc, ximu3, lib ]

    steps:
      - uses: actions/checkout@v2

      - name: Build
        working-directory: x-IMU3-API/Rust/
        run: |
          rustup target add ${{ matrix.target[1] }}
          cargo build --release --target ${{ matrix.target[1] }}

      - uses: actions/upload-artifact@v3
        name: Upload to artifacts
        with:
          name: rust-${{ matrix.target[1] }}
          path: x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/${{ matrix.target[2] }}.${{ matrix.target[3] }}

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Zip
        uses: vimtor/action-zip@v1
        with:
          files: x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/${{ matrix.target[2] }}.${{ matrix.target[3] }}
          dest: x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/${{ matrix.target[2] }}-${{ matrix.target[1] }}.zip

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: x-IMU3-API/Rust/target/${{ matrix.target[1] }}/release/${{ matrix.target[2] }}-${{ matrix.target[1] }}.zip
          asset_name: ${{ matrix.target[2] }}-${{ matrix.target[1] }}.zip
          asset_content_type: application/octet-stream

  rust-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Dry run
        working-directory: x-IMU3-API/Rust/
        run: cargo publish --no-verify --dry-run

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Publish crate
        working-directory: x-IMU3-API/Rust/
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.RUST_TOKEN }}
        run: cargo publish --no-verify

  csharp:
    runs-on: windows-latest
    needs: [ create-release, rust ]

    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Download from artifacts
        uses: actions/download-artifact@v3
        with:
          name: rust-x86_64-pc-windows-msvc
          path: x-IMU3-API/Rust/target/release

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Run examples
        working-directory: Examples/CSharp/x-IMU3-Examples/
        run: msbuild x-IMU3-Examples.sln -property:Configuration=Release

  python:
    runs-on: ${{ matrix.target[0] }}
    needs: rust

    strategy:
      fail-fast: false
      matrix:
        target: # [ os, rust-target, cibuildwheel-platform ]
          - [ macos-latest, x86_64-apple-darwin, macosx_x86_64 ]
          - [ macos-latest, aarch64-apple-darwin, macosx_arm64 ]
          - [ ubuntu-latest, i686-unknown-linux-gnu, manylinux_i686 ]
          - [ ubuntu-latest, aarch64-unknown-linux-gnu, manylinux_aarch64 ]
          - [ ubuntu-latest, x86_64-unknown-linux-gnu, manylinux_x86_64 ]
          - [ windows-latest, x86_64-pc-windows-msvc, win_amd64 ]

        python-version: [ "cp38-", "cp39-", "cp310-" ]

    steps:
      - uses: actions/checkout@v2

      - name: Download from artifacts
        uses: actions/download-artifact@v3
        with:
          name: rust-${{ matrix.target[1] }}
          path: x-IMU3-API/Rust/target/release

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine

      - if: matrix.target[0] == 'ubuntu-latest'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.8.0
        env:
          CIBW_ARCHS: all
          CIBW_BUILD: ${{ matrix.python-version }}${{ matrix.target[2] }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_24
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_24
          CIBW_BEFORE_BUILD: pip install oldest-supported-numpy

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Publish Python package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYTHON_TOKEN }}
        run: python -m twine upload --verbose --repository pypi wheelhouse/*

  gui:
    runs-on: ${{ matrix.target[0] }}
    needs: [ create-release, rust ]

    strategy:
      fail-fast: false
      matrix:
        target: # [ os, rust-target, cmake-osx-architecture, gui-extension  ]
          - [ macos-latest, x86_64-apple-darwin, x86_64, "-Intel.zip" ]
          - [ macos-latest, aarch64-apple-darwin, arm64, "-Apple-Silicon.zip" ]
          - [ ubuntu-latest, x86_64-unknown-linux-gnu, "", "" ]
          - [ windows-latest, x86_64-pc-windows-msvc, "", ".exe" ]

    steps:
      - uses: actions/checkout@v2

      - name: Download from artifacts
        uses: actions/download-artifact@v3
        with:
          name: rust-${{ matrix.target[1] }}
          path: x-IMU3-API/Rust/target/release

      - if: matrix.target[0] == 'ubuntu-latest'
        name: Install ubuntu dependencies # https://github.com/juce-framework/JUCE/blob/master/docs/Linux%20Dependencies.md
        run: |
          sudo apt update
          sudo apt install libasound2-dev libjack-jackd2-dev \
          ladspa-sdk \
          libcurl4-openssl-dev \
          libfreetype6-dev \
          libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
          libwebkit2gtk-4.0-dev \
          libglu1-mesa-dev mesa-common-dev \

      - name: Build CMake targets
        run: |
          mkdir cmake-build-release
          cd cmake-build-release
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=${{ matrix.target[2] }}
          cmake --build . --config Release

      - if: startsWith(github.ref, 'refs/tags/v') && matrix.target[0] == 'macos-latest'
        name: Zip (macOS) # zip macOS files to avoid duplicate file names
        working-directory: cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/
        run: zip -r "x-IMU3 GUI${{ matrix.target[3] }}" "x-IMU3 GUI.app"

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: cmake-build-release/x-IMU3-GUI/x-IMU3-GUI_artefacts/Release/x-IMU3 GUI${{ matrix.target[3] }}
          asset_name: x-IMU3-GUI${{ matrix.target[3] }}
          asset_content_type: application/octet-stream
