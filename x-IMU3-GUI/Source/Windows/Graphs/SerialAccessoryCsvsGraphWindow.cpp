// This file was generated by x-IMU3-GUI/Source/Windows/Graphs/generate_graph_windows.py

#include "Convert.h"
#include "DevicePanel/DevicePanel.h"
#include "SerialAccessoryCsvsGraphWindow.h"

juce::ValueTree SerialAccessoryCsvsGraphWindow::settingsTree_("SerialAccessoryCsvsGraphSettings");

SerialAccessoryCsvsGraphWindow::SerialAccessoryCsvsGraphWindow(const juce::ValueTree& windowLayout, const juce::Identifier& type_, DevicePanel& devicePanel_, GLRenderer& glRenderer)
        : GraphWindow(windowLayout, type_, devicePanel_,
                      glRenderer,
                      "CSV",
                      { "1", "2", "3", "4", "5", "6", "7", "8" },
                      { UIColours::graphChannel1, UIColours::graphChannel2, UIColours::graphChannel3, UIColours::graphChannel4, UIColours::graphChannel5, UIColours::graphChannel6, UIColours::graphChannel7, UIColours::graphChannel8 },
                      settingsTree_,
                      false)
{
    callbackIDs.push_back(devicePanel.getConnection()->addSerialAccessoryCallback(serialAccessoryCallback = [&](auto message)
    {
        std::vector<float> values;
        for (const auto& string : juce::StringArray::fromTokens(message.char_array, ",", ""))
        {
            values.push_back(string.getFloatValue());
        }
        update(message.timestamp, values);
    }));
}

SerialAccessoryCsvsGraphWindow::~SerialAccessoryCsvsGraphWindow()
{
    for (const auto callbackID : callbackIDs)
    {
        devicePanel.getConnection()->removeCallback(callbackID);
    }
}
