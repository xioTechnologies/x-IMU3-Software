from typing import Callable, Sequence

CHARGING_STATUS_NOT_CONNECTED: int
CHARGING_STATUS_CHARGING: int
CHARGING_STATUS_CHARGING_COMPLETE: int
CHARGING_STATUS_CHARGING_ON_HOLD: int
CONNECTION_STATUS_CONNECTED: int
CONNECTION_STATUS_RECONNECTING: int
DECODE_ERROR_BUFFER_OVERRUN: int
DECODE_ERROR_INVALID_MESSAGE_IDENTIFIER: int
DECODE_ERROR_INVALID_UTF8: int
DECODE_ERROR_INVALID_JSON: int
DECODE_ERROR_JSON_IS_NOT_AN_OBJECT: int
DECODE_ERROR_JSON_OBJECT_IS_NOT_A_SINGLE_KEY_VALUE_PAIR: int
DECODE_ERROR_INVALID_ESCAPE_SEQUENCE: int
DECODE_ERROR_INVALID_BINARY_MESSAGE_LENGTH: int
DECODE_ERROR_UNABLE_TO_PARSE_ASCII_MESSAGE: int
FILE_CONVERTER_STATUS_COMPLETE: int
FILE_CONVERTER_STATUS_FAILED: int
FILE_CONVERTER_STATUS_IN_PROGRESS: int
PORT_TYPE_USB: int
PORT_TYPE_SERIAL: int
PORT_TYPE_BLUETOOTH: int
RESULT_OK: int
RESULT_ADDR_IN_USE: int
RESULT_ADDR_NOT_AVAILABLE: int
RESULT_ALREADY_EXISTS: int
RESULT_ARGUMENT_LIST_TOO_LONG: int
RESULT_BROKEN_PIPE: int
RESULT_CONNECTION_ABORTED: int
RESULT_CONNECTION_REFUSED: int
RESULT_CONNECTION_RESET: int
RESULT_DEADLOCK: int
RESULT_DIRECTORY_NOT_EMPTY: int
RESULT_EXECUTABLE_FILE_BUSY: int
RESULT_FILE_TOO_LARGE: int
RESULT_HOST_UNREACHABLE: int
RESULT_INTERRUPTED: int
RESULT_INVALID_DATA: int
RESULT_INVALID_INPUT: int
RESULT_IS_A_DIRECTORY: int
RESULT_NETWORK_DOWN: int
RESULT_NETWORK_UNREACHABLE: int
RESULT_NOT_A_DIRECTORY: int
RESULT_NOT_CONNECTED: int
RESULT_NOT_FOUND: int
RESULT_NOT_SEEKABLE: int
RESULT_OTHER: int
RESULT_OUT_OF_MEMORY: int
RESULT_PERMISSION_DENIED: int
RESULT_READ_ONLY_FILESYSTEM: int
RESULT_RESOURCE_BUSY: int
RESULT_STALE_NETWORK_FILE_HANDLE: int
RESULT_STORAGE_FULL: int
RESULT_TIMED_OUT: int
RESULT_TOO_MANY_LINKS: int
RESULT_UNEXPECTED_EOF: int
RESULT_UNSUPPORTED: int
RESULT_WOULD_BLOCK: int
RESULT_WRITE_ZERO: int
RESULT_UNKNOWN_ERROR: int

# charging_status_methods
def charging_status_from_float(status: float) -> int: ...
def charging_status_to_string(status: int) -> str: ...

# connection_status_methods
def connection_status_to_string(status: int) -> str: ...

# decode_error_methods
def decode_error_to_string(error: int) -> str: ...

# file_converter_status_methods
def file_converter_status_to_string(status: int) -> str: ...

# port_type_methods
def port_type_to_string(error: int) -> str: ...

# result_methods
def result_to_string(result: int) -> str: ...

# command_message_object
class CommandMessage:
    @property
    def json(self) -> str: ...
    @property
    def key(self) -> str: ...
    @property
    def value(self) -> str: ...
    @property
    def error(self) -> str: ...
    @staticmethod
    def parse(json: str) -> CommandMessage: ...

# connection_object
class Connection:
    def __init__(
        self,
        connection_info: UsbConnectionInfo | SerialConnectionInfo | TcpConnectionInfo | UdpConnectionInfo | BluetoothConnectionInfo | FileConnectionInfo,
    ) -> None: ...
    def open(self) -> int: ...
    def open_async(self, callback: Callable[[int], None]) -> None: ...
    def close(self) -> None: ...
    def ping(self) -> PingResponse: ...
    def ping_async(self, callback: Callable[[PingResponse], None]) -> None: ...
    def send_commands(self, commands: Sequence[str], retries: int, timeout: int) -> list[str]: ...
    def send_commands_async(self, commands: Sequence[str], retries: int, timeout: int, callback: Callable[[list[str]], None]) -> None: ...
    def get_info(self) -> UsbConnectionInfo | SerialConnectionInfo | TcpConnectionInfo | UdpConnectionInfo | BluetoothConnectionInfo | FileConnectionInfo: ...
    def get_statistics(self) -> Statistics: ...
    def add_decode_error_callback(self, callback: Callable[[int], None]) -> int: ...
    def add_statistics_callback(self, callback: Callable[[Statistics], None]) -> int: ...
    def add_inertial_callback(self, callback: Callable[[InertialMessage], None]) -> int: ...
    def add_magnetometer_callback(self, callback: Callable[[MagnetometerMessage], None]) -> int: ...
    def add_quaternion_callback(self, callback: Callable[[QuaternionMessage], None]) -> int: ...
    def add_rotation_matrix_callback(self, callback: Callable[[RotationMatrixMessage], None]) -> int: ...
    def add_euler_angles_callback(self, callback: Callable[[EulerAnglesMessage], None]) -> int: ...
    def add_linear_acceleration_callback(self, callback: Callable[[LinearAccelerationMessage], None]) -> int: ...
    def add_earth_acceleration_callback(self, callback: Callable[[EarthAccelerationMessage], None]) -> int: ...
    def add_ahrs_status_callback(self, callback: Callable[[AhrsStatusMessage], None]) -> int: ...
    def add_high_g_accelerometer_callback(self, callback: Callable[[HighGAccelerometerMessage], None]) -> int: ...
    def add_temperature_callback(self, callback: Callable[[TemperatureMessage], None]) -> int: ...
    def add_battery_callback(self, callback: Callable[[BatteryMessage], None]) -> int: ...
    def add_rssi_callback(self, callback: Callable[[RssiMessage], None]) -> int: ...
    def add_serial_accessory_callback(self, callback: Callable[[SerialAccessoryMessage], None]) -> int: ...
    def add_notification_callback(self, callback: Callable[[NotificationMessage], None]) -> int: ...
    def add_error_callback(self, callback: Callable[[ErrorMessage], None]) -> int: ...
    def add_end_of_file_callback(self, callback: Callable[[], None]) -> int: ...
    def remove_callback(self, callback_id: int) -> None: ...

# usb_connection_info_object
class UsbConnectionInfo:
    @property
    def port_name(self) -> str: ...
    def to_string(self) -> str: ...

# serial_connection_info_object
class SerialConnectionInfo:
    @property
    def port_name(self) -> str: ...
    @property
    def baud_rate(self) -> int: ...
    @property
    def rts_cts_enabled(self) -> bool: ...
    def to_string(self) -> str: ...

# tcp_connection_info_object
class TcpConnectionInfo:
    @property
    def ip_address(self) -> str: ...
    @property
    def port(self) -> int: ...
    def to_string(self) -> str: ...

# udp_connection_info_object
class UdpConnectionInfo:
    @property
    def ip_address(self) -> str: ...
    @property
    def send_port(self) -> int: ...
    @property
    def receive_port(self) -> int: ...
    def to_string(self) -> str: ...

# bluetooth_connection_info_object
class BluetoothConnectionInfo:
    @property
    def port_name(self) -> str: ...
    def to_string(self) -> str: ...

# file_connection_info_object
class FileConnectionInfo:
    @property
    def file_path(self) -> str: ...
    def to_string(self) -> str: ...

# data_logger_object
class DataLogger:
    def __init__(self, destination: str, name: str, connections: Sequence[Connection]) -> None: ...
    def get_result(self) -> int: ...
    @staticmethod
    def log(destination: str, name: str, connections: Sequence[Connection], seconds: int) -> int: ...

# file_converter_object
class FileConverter:
    def __init__(self, destination: str, name: str, files: Sequence[str], callback: Callable[[FileConverterProgress], None]) -> None: ...
    @staticmethod
    def convert(destination: str, name: str, files: Sequence[str]) -> FileConverterProgress: ...

# file_converter_progress_object
class FileConverterProgress:
    @property
    def status(self) -> int: ...
    @property
    def percentage(self) -> float: ...
    @property
    def bytes_processed(self) -> int: ...
    @property
    def bytes_total(self) -> int: ...
    def to_string(self) -> str: ...

# inertial_message_object
class InertialMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def gyroscope_x(self) -> float: ...
    @property
    def gyroscope_y(self) -> float: ...
    @property
    def gyroscope_z(self) -> float: ...
    @property
    def accelerometer_x(self) -> float: ...
    @property
    def accelerometer_y(self) -> float: ...
    @property
    def accelerometer_z(self) -> float: ...
    def to_string(self) -> str: ...

# magnetometer_message_object
class MagnetometerMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def z(self) -> float: ...
    def to_string(self) -> str: ...

# quaternion_message_object
class QuaternionMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def w(self) -> float: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def z(self) -> float: ...
    def to_string(self) -> str: ...
    def to_euler_angles_message(self) -> EulerAnglesMessage: ...

# rotation_matrix_message_object
class RotationMatrixMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def xx(self) -> float: ...
    @property
    def xy(self) -> float: ...
    @property
    def xz(self) -> float: ...
    @property
    def yx(self) -> float: ...
    @property
    def yy(self) -> float: ...
    @property
    def yz(self) -> float: ...
    @property
    def zx(self) -> float: ...
    @property
    def zy(self) -> float: ...
    @property
    def zz(self) -> float: ...
    def to_string(self) -> str: ...
    def to_euler_angles_message(self) -> EulerAnglesMessage: ...

# euler_angles_message_object
class EulerAnglesMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def roll(self) -> float: ...
    @property
    def pitch(self) -> float: ...
    @property
    def yaw(self) -> float: ...
    def to_string(self) -> str: ...
    def to_quaternion_message(self) -> QuaternionMessage: ...

# linear_acceleration_message_object
class LinearAccelerationMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def quaternion_w(self) -> float: ...
    @property
    def quaternion_x(self) -> float: ...
    @property
    def quaternion_y(self) -> float: ...
    @property
    def quaternion_z(self) -> float: ...
    @property
    def acceleration_x(self) -> float: ...
    @property
    def acceleration_y(self) -> float: ...
    @property
    def acceleration_z(self) -> float: ...
    def to_string(self) -> str: ...
    def to_euler_angles_message(self) -> EulerAnglesMessage: ...

# earth_acceleration_message_object
class EarthAccelerationMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def quaternion_w(self) -> float: ...
    @property
    def quaternion_x(self) -> float: ...
    @property
    def quaternion_y(self) -> float: ...
    @property
    def quaternion_z(self) -> float: ...
    @property
    def acceleration_x(self) -> float: ...
    @property
    def acceleration_y(self) -> float: ...
    @property
    def acceleration_z(self) -> float: ...
    def to_string(self) -> str: ...
    def to_euler_angles_message(self) -> EulerAnglesMessage: ...

# ahrs_status_message_object
class AhrsStatusMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def initialising(self) -> float: ...
    @property
    def angular_rate_recovery(self) -> float: ...
    @property
    def acceleration_recovery(self) -> float: ...
    @property
    def magnetic_recovery(self) -> float: ...
    def to_string(self) -> str: ...

# high_g_accelerometer_message_object
class HighGAccelerometerMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def z(self) -> float: ...
    def to_string(self) -> str: ...

# temperature_message_object
class TemperatureMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def temperature(self) -> float: ...
    def to_string(self) -> str: ...

# battery_message_object
class BatteryMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def percentage(self) -> float: ...
    @property
    def voltage(self) -> float: ...
    @property
    def charging_status(self) -> float: ...
    def to_string(self) -> str: ...

# rssi_message_object
class RssiMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def percentage(self) -> float: ...
    @property
    def power(self) -> float: ...
    def to_string(self) -> str: ...

# serial_accessory_message_object
class SerialAccessoryMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def string(self) -> str: ...
    @property
    def bytes(self) -> bytearray: ...
    def to_string(self) -> str: ...

# notification_message_object
class NotificationMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def string(self) -> str: ...
    @property
    def bytes(self) -> bytearray: ...
    def to_string(self) -> str: ...

# error_message_object
class ErrorMessage:
    @property
    def timestamp(self) -> int: ...
    @property
    def string(self) -> str: ...
    @property
    def bytes(self) -> bytearray: ...
    def to_string(self) -> str: ...

# keep_open_object
class KeepOpen:
    def __init__(self, connection: Connection, callback: Callable[[int], None]) -> None: ...

# network_announcement_object
class NetworkAnnouncement:
    def __init__(self) -> None: ...
    def get_result(self) -> int: ...
    def add_callback(self, callback: Callable[[list[NetworkAnnouncementMessage]], None]) -> int: ...
    def remove_callback(self, callback_id: int) -> None: ...
    def get_messages(self) -> list[NetworkAnnouncementMessage]: ...
    def get_messages_after_short_delay(self) -> list[NetworkAnnouncementMessage]: ...

# network_announcement_message_object
class NetworkAnnouncementMessage:
    @property
    def device_name(self) -> str: ...
    @property
    def serial_number(self) -> str: ...
    @property
    def ip_address(self) -> str: ...
    @property
    def tcp_port(self) -> int: ...
    @property
    def udp_send(self) -> int: ...
    @property
    def udp_receive(self) -> int: ...
    @property
    def rssi(self) -> int: ...
    @property
    def battery(self) -> int: ...
    @property
    def charging_status(self) -> int: ...
    def to_tcp_connection_info(self) -> TcpConnectionInfo: ...
    def to_udp_connection_info(self) -> UdpConnectionInfo: ...
    def to_string(self) -> str: ...

# ping_response_object
class PingResponse:
    @property
    def result(self) -> int: ...
    @property
    def interface(self) -> str: ...
    @property
    def device_name(self) -> str: ...
    @property
    def serial_number(self) -> str: ...
    def to_string(self) -> str: ...

# port_scanner_object
class PortScanner:
    def __init__(self, callback: Callable[[list[Device]], None]) -> None: ...
    def get_devices(self) -> list[Device]: ...
    @staticmethod
    def scan() -> list[Device]: ...
    @staticmethod
    def scan_filter(port_type: int) -> list[Device]: ...
    @staticmethod
    def get_port_names() -> list[str]: ...

# device_object
class Device:
    @property
    def device_name(self) -> str: ...
    @property
    def serial_number(self) -> str: ...
    @property
    def connection_info(self) -> object: ...
    def to_string(self) -> str: ...

# statistics_object
class Statistics:
    @property
    def timestamp(self) -> int: ...
    @property
    def data_total(self) -> int: ...
    @property
    def data_rate(self) -> int: ...
    @property
    def message_total(self) -> int: ...
    @property
    def message_rate(self) -> int: ...
    @property
    def error_total(self) -> int: ...
    @property
    def error_rate(self) -> int: ...
    def to_string(self) -> str: ...
