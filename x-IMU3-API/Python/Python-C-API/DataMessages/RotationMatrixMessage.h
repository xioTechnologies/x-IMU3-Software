// This file was generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py

#ifndef ROTATION_MATRIX_MESSAGE_H
#define ROTATION_MATRIX_MESSAGE_H

#include "../../../C/Ximu3.h"
#include <Python.h>

typedef struct
{
    PyObject_HEAD
    XIMU3_RotationMatrixMessage message;
} RotationMatrixMessage;

static void rotation_matrix_message_free(RotationMatrixMessage* self)
{
    Py_TYPE(self)->tp_free(self);
}

static PyObject* rotation_matrix_message_get_timestamp(RotationMatrixMessage* self)
{
    return Py_BuildValue("K", self->message.timestamp);
}

static PyObject* rotation_matrix_message_get_xx_element(RotationMatrixMessage* self)
{
    return Py_BuildValue("f", self->message.xx_element);
}

static PyObject* rotation_matrix_message_get_xy_element(RotationMatrixMessage* self)
{
    return Py_BuildValue("f", self->message.xy_element);
}

static PyObject* rotation_matrix_message_get_xz_element(RotationMatrixMessage* self)
{
    return Py_BuildValue("f", self->message.xz_element);
}

static PyObject* rotation_matrix_message_get_yx_element(RotationMatrixMessage* self)
{
    return Py_BuildValue("f", self->message.yx_element);
}

static PyObject* rotation_matrix_message_get_yy_element(RotationMatrixMessage* self)
{
    return Py_BuildValue("f", self->message.yy_element);
}

static PyObject* rotation_matrix_message_get_yz_element(RotationMatrixMessage* self)
{
    return Py_BuildValue("f", self->message.yz_element);
}

static PyObject* rotation_matrix_message_get_zx_element(RotationMatrixMessage* self)
{
    return Py_BuildValue("f", self->message.zx_element);
}

static PyObject* rotation_matrix_message_get_zy_element(RotationMatrixMessage* self)
{
    return Py_BuildValue("f", self->message.zy_element);
}

static PyObject* rotation_matrix_message_get_zz_element(RotationMatrixMessage* self)
{
    return Py_BuildValue("f", self->message.zz_element);
}

static PyObject* rotation_matrix_message_to_string(RotationMatrixMessage* self, PyObject* args)
{
    return Py_BuildValue("s", XIMU3_rotation_matrix_message_to_string(self->message));
}

static PyGetSetDef rotation_matrix_message_get_set[] = {
        { "timestamp",  (getter) rotation_matrix_message_get_timestamp,  NULL, "", NULL },
        { "xx_element", (getter) rotation_matrix_message_get_xx_element, NULL, "", NULL },
        { "xy_element", (getter) rotation_matrix_message_get_xy_element, NULL, "", NULL },
        { "xz_element", (getter) rotation_matrix_message_get_xz_element, NULL, "", NULL },
        { "yx_element", (getter) rotation_matrix_message_get_yx_element, NULL, "", NULL },
        { "yy_element", (getter) rotation_matrix_message_get_yy_element, NULL, "", NULL },
        { "yz_element", (getter) rotation_matrix_message_get_yz_element, NULL, "", NULL },
        { "zx_element", (getter) rotation_matrix_message_get_zx_element, NULL, "", NULL },
        { "zy_element", (getter) rotation_matrix_message_get_zy_element, NULL, "", NULL },
        { "zz_element", (getter) rotation_matrix_message_get_zz_element, NULL, "", NULL },
        { NULL }  /* sentinel */
};

static PyMethodDef rotation_matrix_message_methods[] = {
        { "to_string", (PyCFunction) rotation_matrix_message_to_string, METH_NOARGS, "" },
        { NULL } /* sentinel */
};

static PyTypeObject rotation_matrix_message_object = {
        PyVarObject_HEAD_INIT(NULL, 0)
        .tp_name = "ximu3.RotationMatrixMessage",
        .tp_basicsize = sizeof(RotationMatrixMessage),
        .tp_dealloc = (destructor) rotation_matrix_message_free,
        .tp_getset = rotation_matrix_message_get_set,
        .tp_methods = rotation_matrix_message_methods,
};

static PyObject* rotation_matrix_message_from(const XIMU3_RotationMatrixMessage* const message)
{
    RotationMatrixMessage* const self = (RotationMatrixMessage*) rotation_matrix_message_object.tp_alloc(&rotation_matrix_message_object, 0);
    self->message = *message;
    return (PyObject*) self;
}

typedef struct
{
    PyObject* callable;
    XIMU3_RotationMatrixMessage data;
} RotationMatrixPendingCallArg;

static int rotation_matrix_message_pending_call_func(void* arg)
{
    PyObject* const object = rotation_matrix_message_from(&((RotationMatrixPendingCallArg*) arg)->data);
    PyObject* const tuple = Py_BuildValue("(O)", object);
    Py_DECREF(PyObject_CallObject(((RotationMatrixPendingCallArg*) arg)->callable, tuple));
    Py_DECREF(tuple);
    Py_DECREF(object);
    free(arg);
    return 0;
}

static void rotation_matrix_message_callback(XIMU3_RotationMatrixMessage data, void* context)
{
    RotationMatrixPendingCallArg* const arg = malloc(sizeof(RotationMatrixPendingCallArg));
    arg->callable = (PyObject*) context;
    arg->data = data;
    Py_AddPendingCall(&rotation_matrix_message_pending_call_func, arg);
}

#endif
