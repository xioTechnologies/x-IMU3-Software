#ifndef $name_macro_case$_MESSAGE_H
#define $name_macro_case$_MESSAGE_H

#include "../../../C/Ximu3.h"
#include <Python.h>

typedef struct
{
    PyObject_HEAD
    XIMU3_$name_pascal_case$Message message;
} $name_pascal_case$Message;

static void $name_snake_case$_message_free($name_pascal_case$Message* self)
{
    Py_TYPE(self)->tp_free(self);
}

$get_functions$

static PyObject* $name_snake_case$_message_to_string($name_pascal_case$Message* self, PyObject* args)
{
    return Py_BuildValue("s", XIMU3_$name_snake_case$_message_to_string(self->message));
}

static PyGetSetDef $name_snake_case$_message_get_set[] = {
        $get_set_members$
        { NULL } /* sentinel */
};

static PyMethodDef $name_snake_case$_message_methods[] = {
        { "to_string", (PyCFunction) $name_snake_case$_message_to_string, METH_NOARGS, "" },
        { NULL } /* sentinel */
};

static PyTypeObject $name_snake_case$_message_object = {
        PyVarObject_HEAD_INIT(NULL, 0)
        .tp_name = "ximu3.$name_pascal_case$Message",
        .tp_basicsize = sizeof($name_pascal_case$Message),
        .tp_dealloc = (destructor) $name_snake_case$_message_free,
        .tp_getset = $name_snake_case$_message_get_set,
        .tp_methods = $name_snake_case$_message_methods,
};

static PyObject* $name_snake_case$_message_from(const XIMU3_$name_pascal_case$Message* const message)
{
    $name_pascal_case$Message* const self = ($name_pascal_case$Message*) $name_snake_case$_message_object.tp_alloc(&$name_snake_case$_message_object, 0);
    self->message = *message;
    return (PyObject*) self;
}

static void $name_snake_case$_message_callback(XIMU3_$name_pascal_case$Message data, void* context)
{
    const PyGILState_STATE state = PyGILState_Ensure();

    PyObject* const object = $name_snake_case$_message_from(&data);
    PyObject* const tuple = Py_BuildValue("(O)", object);
    Py_DECREF(PyObject_CallObject((PyObject*) context, tuple));
    Py_DECREF(tuple);
    Py_DECREF(object);

    PyGILState_Release(state);
}

#endif
