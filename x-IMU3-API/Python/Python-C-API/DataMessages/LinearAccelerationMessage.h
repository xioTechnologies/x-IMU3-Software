// This file was generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py

#ifndef LINEAR_ACCELERATION_MESSAGE_H
#define LINEAR_ACCELERATION_MESSAGE_H

#include "../../../C/Ximu3.h"
#include <Python.h>

typedef struct
{
    PyObject_HEAD
    XIMU3_LinearAccelerationMessage message;
} LinearAccelerationMessage;

static void linear_acceleration_message_free(LinearAccelerationMessage* self)
{
    Py_TYPE(self)->tp_free(self);
}

static PyObject* linear_acceleration_message_get_timestamp(LinearAccelerationMessage* self)
{
    return Py_BuildValue("K", self->message.timestamp);
}

static PyObject* linear_acceleration_message_get_w_element(LinearAccelerationMessage* self)
{
    return Py_BuildValue("f", self->message.w_element);
}

static PyObject* linear_acceleration_message_get_x_element(LinearAccelerationMessage* self)
{
    return Py_BuildValue("f", self->message.x_element);
}

static PyObject* linear_acceleration_message_get_y_element(LinearAccelerationMessage* self)
{
    return Py_BuildValue("f", self->message.y_element);
}

static PyObject* linear_acceleration_message_get_z_element(LinearAccelerationMessage* self)
{
    return Py_BuildValue("f", self->message.z_element);
}

static PyObject* linear_acceleration_message_get_x_axis(LinearAccelerationMessage* self)
{
    return Py_BuildValue("f", self->message.x_axis);
}

static PyObject* linear_acceleration_message_get_y_axis(LinearAccelerationMessage* self)
{
    return Py_BuildValue("f", self->message.y_axis);
}

static PyObject* linear_acceleration_message_get_z_axis(LinearAccelerationMessage* self)
{
    return Py_BuildValue("f", self->message.z_axis);
}

static PyObject* linear_acceleration_message_to_string(LinearAccelerationMessage* self, PyObject* args)
{
    return Py_BuildValue("s", XIMU3_linear_acceleration_message_to_string(self->message));
}

static PyGetSetDef linear_acceleration_message_get_set[] = {
        { "timestamp", (getter) linear_acceleration_message_get_timestamp, NULL, "", NULL },
        { "w_element", (getter) linear_acceleration_message_get_w_element, NULL, "", NULL },
        { "x_element", (getter) linear_acceleration_message_get_x_element, NULL, "", NULL },
        { "y_element", (getter) linear_acceleration_message_get_y_element, NULL, "", NULL },
        { "z_element", (getter) linear_acceleration_message_get_z_element, NULL, "", NULL },
        { "x_axis",    (getter) linear_acceleration_message_get_x_axis,    NULL, "", NULL },
        { "y_axis",    (getter) linear_acceleration_message_get_y_axis,    NULL, "", NULL },
        { "z_axis",    (getter) linear_acceleration_message_get_z_axis,    NULL, "", NULL },
        { NULL }  /* sentinel */
};

static PyMethodDef linear_acceleration_message_methods[] = {
        { "to_string", (PyCFunction) linear_acceleration_message_to_string, METH_NOARGS, "" },
        { NULL } /* sentinel */
};

static PyTypeObject linear_acceleration_message_object = {
        PyVarObject_HEAD_INIT(NULL, 0)
        .tp_name = "ximu3.LinearAccelerationMessage",
        .tp_basicsize = sizeof(LinearAccelerationMessage),
        .tp_dealloc = (destructor) linear_acceleration_message_free,
        .tp_getset = linear_acceleration_message_get_set,
        .tp_methods = linear_acceleration_message_methods,
};

static PyObject* linear_acceleration_message_from(const XIMU3_LinearAccelerationMessage* const message)
{
    LinearAccelerationMessage* const self = (LinearAccelerationMessage*) linear_acceleration_message_object.tp_alloc(&linear_acceleration_message_object, 0);
    self->message = *message;
    return (PyObject*) self;
}

static void linear_acceleration_message_callback(XIMU3_LinearAccelerationMessage data, void* context)
{
    const PyGILState_STATE state = PyGILState_Ensure();

    PyObject* const object = linear_acceleration_message_from(&data);
    PyObject* const tuple = Py_BuildValue("(O)", object);
    Py_DECREF(PyObject_CallObject((PyObject*) context, tuple));
    Py_DECREF(tuple);
    Py_DECREF(object);

    PyGILState_Release(state);
}

#endif
