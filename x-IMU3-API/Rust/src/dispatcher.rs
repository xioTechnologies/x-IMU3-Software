use crossbeam::channel::Sender;
use std::sync::atomic::{AtomicU64, Ordering};
use std::sync::{Arc, Mutex};
use crate::command_message::*;
use crate::data_messages::*;
use crate::decode_error::*;
use crate::statistics::*;

pub enum DispatcherData {
    DecodeError(DecodeError),
    Statistics(Statistics),
    Command(CommandMessage),
    // Start of code block #0 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
    Inertial(InertialMessage),
    Magnetometer(MagnetometerMessage),
    Quaternion(QuaternionMessage),
    RotationMatrix(RotationMatrixMessage),
    EulerAngles(EulerAnglesMessage),
    LinearAcceleration(LinearAccelerationMessage),
    EarthAcceleration(EarthAccelerationMessage),
    AhrsStatus(AhrsStatusMessage),
    HighGAccelerometer(HighGAccelerometerMessage),
    Temperature(TemperatureMessage),
    Battery(BatteryMessage),
    Rssi(RssiMessage),
    SerialAccessory(SerialAccessoryMessage),
    Notification(NotificationMessage),
    Error(ErrorMessage),
    // End of code block #0 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
    EndOfFile(),
}

pub struct Dispatcher {
    pub sender: Sender<DispatcherData>,
    closure_counter: AtomicU64,
    decode_error_closures: Arc<Mutex<Vec<(Box<dyn Fn(DecodeError) + Send>, u64)>>>,
    statistics_closures: Arc<Mutex<Vec<(Box<dyn Fn(Statistics) + Send>, u64)>>>,
    command_closures: Arc<Mutex<Vec<(Box<dyn Fn(CommandMessage) + Send>, u64)>>>,
    data_closures: Arc<Mutex<Vec<(Box<dyn Fn(Box<dyn DataMessage>) + Send>, u64)>>>,
    // Start of code block #1 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
    inertial_closures: Arc<Mutex<Vec<(Box<dyn Fn(InertialMessage) + Send>, u64)>>>,
    magnetometer_closures: Arc<Mutex<Vec<(Box<dyn Fn(MagnetometerMessage) + Send>, u64)>>>,
    quaternion_closures: Arc<Mutex<Vec<(Box<dyn Fn(QuaternionMessage) + Send>, u64)>>>,
    rotation_matrix_closures: Arc<Mutex<Vec<(Box<dyn Fn(RotationMatrixMessage) + Send>, u64)>>>,
    euler_angles_closures: Arc<Mutex<Vec<(Box<dyn Fn(EulerAnglesMessage) + Send>, u64)>>>,
    linear_acceleration_closures: Arc<Mutex<Vec<(Box<dyn Fn(LinearAccelerationMessage) + Send>, u64)>>>,
    earth_acceleration_closures: Arc<Mutex<Vec<(Box<dyn Fn(EarthAccelerationMessage) + Send>, u64)>>>,
    ahrs_status_closures: Arc<Mutex<Vec<(Box<dyn Fn(AhrsStatusMessage) + Send>, u64)>>>,
    high_g_accelerometer_closures: Arc<Mutex<Vec<(Box<dyn Fn(HighGAccelerometerMessage) + Send>, u64)>>>,
    temperature_closures: Arc<Mutex<Vec<(Box<dyn Fn(TemperatureMessage) + Send>, u64)>>>,
    battery_closures: Arc<Mutex<Vec<(Box<dyn Fn(BatteryMessage) + Send>, u64)>>>,
    rssi_closures: Arc<Mutex<Vec<(Box<dyn Fn(RssiMessage) + Send>, u64)>>>,
    serial_accessory_closures: Arc<Mutex<Vec<(Box<dyn Fn(SerialAccessoryMessage) + Send>, u64)>>>,
    notification_closures: Arc<Mutex<Vec<(Box<dyn Fn(NotificationMessage) + Send>, u64)>>>,
    error_closures: Arc<Mutex<Vec<(Box<dyn Fn(ErrorMessage) + Send>, u64)>>>,
    // End of code block #1 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
    end_of_file_closures: Arc<Mutex<Vec<(Box<dyn Fn() + Send>, u64)>>>,
}

impl Dispatcher {
    pub fn new() -> Dispatcher {
        let (sender, receiver) = crossbeam::channel::unbounded();

        let dispatcher = Dispatcher {
            sender,
            closure_counter: AtomicU64::new(0),
            decode_error_closures: Arc::new(Mutex::new(Vec::new())),
            statistics_closures: Arc::new(Mutex::new(Vec::new())),
            command_closures: Arc::new(Mutex::new(Vec::new())),
            data_closures: Arc::new(Mutex::new(Vec::new())),
            // Start of code block #2 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
            inertial_closures: Arc::new(Mutex::new(Vec::new())),
            magnetometer_closures: Arc::new(Mutex::new(Vec::new())),
            quaternion_closures: Arc::new(Mutex::new(Vec::new())),
            rotation_matrix_closures: Arc::new(Mutex::new(Vec::new())),
            euler_angles_closures: Arc::new(Mutex::new(Vec::new())),
            linear_acceleration_closures: Arc::new(Mutex::new(Vec::new())),
            earth_acceleration_closures: Arc::new(Mutex::new(Vec::new())),
            ahrs_status_closures: Arc::new(Mutex::new(Vec::new())),
            high_g_accelerometer_closures: Arc::new(Mutex::new(Vec::new())),
            temperature_closures: Arc::new(Mutex::new(Vec::new())),
            battery_closures: Arc::new(Mutex::new(Vec::new())),
            rssi_closures: Arc::new(Mutex::new(Vec::new())),
            serial_accessory_closures: Arc::new(Mutex::new(Vec::new())),
            notification_closures: Arc::new(Mutex::new(Vec::new())),
            error_closures: Arc::new(Mutex::new(Vec::new())),
            // End of code block #2 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
            end_of_file_closures: Arc::new(Mutex::new(Vec::new())),
        };

        let decode_error_closures = dispatcher.decode_error_closures.clone();
        let statistics_closures = dispatcher.statistics_closures.clone();
        let command_closures = dispatcher.command_closures.clone();
        let data_closures = dispatcher.data_closures.clone();
        // Start of code block #3 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
        let inertial_closures = dispatcher.inertial_closures.clone();
        let magnetometer_closures = dispatcher.magnetometer_closures.clone();
        let quaternion_closures = dispatcher.quaternion_closures.clone();
        let rotation_matrix_closures = dispatcher.rotation_matrix_closures.clone();
        let euler_angles_closures = dispatcher.euler_angles_closures.clone();
        let linear_acceleration_closures = dispatcher.linear_acceleration_closures.clone();
        let earth_acceleration_closures = dispatcher.earth_acceleration_closures.clone();
        let ahrs_status_closures = dispatcher.ahrs_status_closures.clone();
        let high_g_accelerometer_closures = dispatcher.high_g_accelerometer_closures.clone();
        let temperature_closures = dispatcher.temperature_closures.clone();
        let battery_closures = dispatcher.battery_closures.clone();
        let rssi_closures = dispatcher.rssi_closures.clone();
        let serial_accessory_closures = dispatcher.serial_accessory_closures.clone();
        let notification_closures = dispatcher.notification_closures.clone();
        let error_closures = dispatcher.error_closures.clone();
        // End of code block #3 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
        let end_of_file_closures = dispatcher.end_of_file_closures.clone();

        std::thread::spawn(move || loop {
            match receiver.recv() {
                Ok(data) => {
                    match data {
                        DispatcherData::DecodeError(decode_error) => decode_error_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(decode_error)),
                        DispatcherData::Statistics(statistics) => statistics_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(statistics)),
                        DispatcherData::Command(command) => command_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(command.clone())),
                        // Start of code block #4 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
                        DispatcherData::Inertial(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            inertial_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::Magnetometer(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            magnetometer_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::Quaternion(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            quaternion_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::RotationMatrix(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            rotation_matrix_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::EulerAngles(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            euler_angles_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::LinearAcceleration(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            linear_acceleration_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::EarthAcceleration(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            earth_acceleration_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::AhrsStatus(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            ahrs_status_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::HighGAccelerometer(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            high_g_accelerometer_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::Temperature(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            temperature_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::Battery(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            battery_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::Rssi(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            rssi_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::SerialAccessory(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            serial_accessory_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::Notification(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            notification_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        DispatcherData::Error(message) => {
                            data_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(Box::new(message)));
                            error_closures.lock().unwrap().iter().for_each(|(closure, _)| closure(message));
                        }
                        // End of code block #4 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
                        DispatcherData::EndOfFile() => end_of_file_closures.lock().unwrap().iter().for_each(|(closure, _)| closure()),
                    }
                }
                Err(_) => break,
            }
        });

        dispatcher
    }

    fn get_closure_id(&self) -> u64 {
        self.closure_counter.fetch_add(1, Ordering::SeqCst)
    }

    pub fn add_decode_error_closure(&self, closure: Box<dyn Fn(DecodeError) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.decode_error_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_statistics_closure(&self, closure: Box<dyn Fn(Statistics) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.statistics_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_command_closure(&self, closure: Box<dyn Fn(CommandMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.command_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_data_closure(&self, closure: Box<dyn Fn(Box<dyn DataMessage>) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.data_closures.lock().unwrap().push((closure, id));
        id
    }

    // Start of code block #5 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py

    pub fn add_inertial_closure(&self, closure: Box<dyn Fn(InertialMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.inertial_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_magnetometer_closure(&self, closure: Box<dyn Fn(MagnetometerMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.magnetometer_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_quaternion_closure(&self, closure: Box<dyn Fn(QuaternionMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.quaternion_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_rotation_matrix_closure(&self, closure: Box<dyn Fn(RotationMatrixMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.rotation_matrix_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_euler_angles_closure(&self, closure: Box<dyn Fn(EulerAnglesMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.euler_angles_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_linear_acceleration_closure(&self, closure: Box<dyn Fn(LinearAccelerationMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.linear_acceleration_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_earth_acceleration_closure(&self, closure: Box<dyn Fn(EarthAccelerationMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.earth_acceleration_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_ahrs_status_closure(&self, closure: Box<dyn Fn(AhrsStatusMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.ahrs_status_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_high_g_accelerometer_closure(&self, closure: Box<dyn Fn(HighGAccelerometerMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.high_g_accelerometer_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_temperature_closure(&self, closure: Box<dyn Fn(TemperatureMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.temperature_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_battery_closure(&self, closure: Box<dyn Fn(BatteryMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.battery_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_rssi_closure(&self, closure: Box<dyn Fn(RssiMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.rssi_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_serial_accessory_closure(&self, closure: Box<dyn Fn(SerialAccessoryMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.serial_accessory_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_notification_closure(&self, closure: Box<dyn Fn(NotificationMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.notification_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn add_error_closure(&self, closure: Box<dyn Fn(ErrorMessage) + Send>) -> u64 {
        let id = self.get_closure_id();
        self.error_closures.lock().unwrap().push((closure, id));
        id
    }
    // End of code block #5 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py

    pub fn remove_closure(&self, closure_id: u64) {
        self.decode_error_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.statistics_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.command_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.data_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        // Start of code block #6 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
        self.inertial_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.magnetometer_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.quaternion_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.rotation_matrix_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.euler_angles_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.linear_acceleration_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.earth_acceleration_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.ahrs_status_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.high_g_accelerometer_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.temperature_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.battery_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.rssi_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.serial_accessory_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.notification_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        self.error_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
        // End of code block #6 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
        self.end_of_file_closures.lock().unwrap().retain(|(_, id)| id != &closure_id);
    }

    pub fn add_end_of_file_closure(&self, closure: Box<dyn Fn() + Send>) -> u64 {
        let id = self.get_closure_id();
        self.end_of_file_closures.lock().unwrap().push((closure, id));
        id
    }

    pub fn remove_all_closures(&self) {
        for closure_id in 0..self.closure_counter.load(Ordering::SeqCst) {
            self.remove_closure(closure_id);
        }
    }
}
