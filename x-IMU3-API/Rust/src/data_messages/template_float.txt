use std::fmt;
use std::mem::size_of;
use crate::data_messages::*;
use crate::decode_error::*;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct $name_pascal_case$Message {
    pub timestamp: u64,
    $arguments_struct$
}

impl DataMessage for $name_pascal_case$Message {
    fn get_ascii_id() -> u8 {
        '$ascii_id$' as u8
    }

    fn parse_ascii(message: &str) -> Result<Self, DecodeError> {
        match scan_fmt!( message, "{},{d},$arguments_scan_format$\r\n",  char, u64, $arguments_types$) {
            Ok((_, timestamp, $arguments_list$)) => Ok($name_pascal_case$Message { timestamp, $arguments_list$ }),
            Err(_) => Err(DecodeError::UnableToParseAsciiMessage),
        }
    }

    fn parse_binary(message: &[u8]) -> Result<Self, DecodeError> {
        #[repr(C, packed)]
        struct BinaryMessage {
            id: u8,
            timestamp: u64,
            $arguments_packed_struct$
            termination: u8,
        }

        if message.len() != size_of::<BinaryMessage>() {
            return Err(DecodeError::InvalidBinaryMessageLength);
        }

        let binary_message = unsafe {
            let ref binary_message = *(message.as_ptr() as *const BinaryMessage);
            binary_message
        };

        Ok($name_pascal_case$Message { timestamp: binary_message.timestamp, $arguments_assign_struct$ })
    }

    fn get_csv_file_name(&self) -> &'static str {
        "$name_pascal_case$.csv"
    }

    fn get_csv_headings(&self) -> &'static str {
        "Timestamp (us),$csv_headings$\n"
    }

    fn to_csv_row(&self) -> String {
        format!("{},$arguments_csv_format$\n", self.timestamp, $arguments_self_list$)
    }
}

impl fmt::Display for $name_pascal_case$Message {
    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        write!(formatter, "{:>8} us$arguments_string_format$", self.timestamp, $arguments_self_list$)
    }
}
