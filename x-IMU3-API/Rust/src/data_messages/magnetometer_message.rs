// This file was generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py

use std::fmt;
use std::mem::size_of;
use crate::data_messages::*;
use crate::decode_error::*;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MagnetometerMessage {
    pub timestamp: u64,
    pub x_axis: f32,
    pub y_axis: f32,
    pub z_axis: f32,
}

impl DataMessage for MagnetometerMessage {
    fn get_ascii_id() -> u8 {
        'M' as u8
    }

    fn parse_ascii(message: &str) -> Result<Self, DecodeError> {
        match scan_fmt!( message, "{},{d},{f},{f},{f}\r\n",  char, u64, f32, f32, f32) {
            Ok((_, timestamp, x_axis, y_axis, z_axis)) => Ok(MagnetometerMessage { timestamp, x_axis, y_axis, z_axis }),
            Err(_) => Err(DecodeError::UnableToParseAsciiMessage),
        }
    }

    fn parse_binary(message: &[u8]) -> Result<Self, DecodeError> {
        #[repr(C, packed)]
        struct BinaryMessage {
            id: u8,
            timestamp: u64,
            x_axis: f32,
            y_axis: f32,
            z_axis: f32,
            termination: u8,
        }

        if message.len() != size_of::<BinaryMessage>() {
            return Err(DecodeError::InvalidBinaryMessageLength);
        }

        let binary_message = unsafe {
            let ref binary_message = *(message.as_ptr() as *const BinaryMessage);
            binary_message
        };

        Ok(MagnetometerMessage { timestamp: binary_message.timestamp, x_axis: binary_message.x_axis, y_axis: binary_message.y_axis, z_axis: binary_message.z_axis })
    }

    fn get_csv_file_name(&self) -> &'static str {
        "Magnetometer.csv"
    }

    fn get_csv_headings(&self) -> &'static str {
        "Timestamp (us),X Axis (a.u.),Y Axis (a.u.),Z Axis (a.u.)\n"
    }

    fn to_csv_row(&self) -> String {
        format!("{},{:.6},{:.6},{:.6}\n", self.timestamp, self.x_axis, self.y_axis, self.z_axis)
    }
}

impl fmt::Display for MagnetometerMessage {
    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        write!(formatter, "{:>8} us {:>8.3} a.u. {:>8.3} a.u. {:>8.3} a.u.", self.timestamp, self.x_axis, self.y_axis, self.z_axis)
    }
}
