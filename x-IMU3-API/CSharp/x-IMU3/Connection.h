#pragma once

#include "../../C/Ximu3.h"
#include "ConnectionInfo.h"
#include "DataMessages/DataMessages.h"
#include "DecodeError.h"
#include "EventArgs.h"
#include "Helpers.h"
#include "PingResponse.h"
#include "Result.h"
#include "Statistics.h"
#include <vector>

using namespace System;
using namespace System::Runtime::InteropServices;

namespace Ximu3
{
    public ref class Connection
    {
    public:
        event EventHandler<DecodeErrorEventArgs^>^ DecodeErrorEvent;
        event EventHandler<StatisticsEventArgs^>^ StatisticsEvent;
        // Start of code block #0 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
        event EventHandler<InertialEventArgs^>^ InertialEvent;
        event EventHandler<MagnetometerEventArgs^>^ MagnetometerEvent;
        event EventHandler<QuaternionEventArgs^>^ QuaternionEvent;
        event EventHandler<RotationMatrixEventArgs^>^ RotationMatrixEvent;
        event EventHandler<EulerAnglesEventArgs^>^ EulerAnglesEvent;
        event EventHandler<LinearAccelerationEventArgs^>^ LinearAccelerationEvent;
        event EventHandler<EarthAccelerationEventArgs^>^ EarthAccelerationEvent;
        event EventHandler<AhrsStatusEventArgs^>^ AhrsStatusEvent;
        event EventHandler<HighGAccelerometerEventArgs^>^ HighGAccelerometerEvent;
        event EventHandler<TemperatureEventArgs^>^ TemperatureEvent;
        event EventHandler<BatteryEventArgs^>^ BatteryEvent;
        event EventHandler<RssiEventArgs^>^ RssiEvent;
        event EventHandler<SerialAccessoryEventArgs^>^ SerialAccessoryEvent;
        event EventHandler<NotificationEventArgs^>^ NotificationEvent;
        event EventHandler<ErrorEventArgs^>^ ErrorEvent;
        // End of code block #0 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py

    public:
        Connection(ConnectionInfo^ connectionInfo)
            : connection{ NewConnection(connectionInfo) }
        {
            ximu3::XIMU3_connection_add_decode_error_callback(connection, static_cast<ximu3::XIMU3_CallbackDecodeError>(Marshal::GetFunctionPointerForDelegate(decodeErrorDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_statistics_callback(connection, static_cast<ximu3::XIMU3_CallbackStatistics>(Marshal::GetFunctionPointerForDelegate(statisticsDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            // Start of code block #1 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
            ximu3::XIMU3_connection_add_inertial_callback(connection, static_cast<ximu3::XIMU3_CallbackInertialMessage>(Marshal::GetFunctionPointerForDelegate(inertialDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_magnetometer_callback(connection, static_cast<ximu3::XIMU3_CallbackMagnetometerMessage>(Marshal::GetFunctionPointerForDelegate(magnetometerDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_quaternion_callback(connection, static_cast<ximu3::XIMU3_CallbackQuaternionMessage>(Marshal::GetFunctionPointerForDelegate(quaternionDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_rotation_matrix_callback(connection, static_cast<ximu3::XIMU3_CallbackRotationMatrixMessage>(Marshal::GetFunctionPointerForDelegate(rotationMatrixDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_euler_angles_callback(connection, static_cast<ximu3::XIMU3_CallbackEulerAnglesMessage>(Marshal::GetFunctionPointerForDelegate(eulerAnglesDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_linear_acceleration_callback(connection, static_cast<ximu3::XIMU3_CallbackLinearAccelerationMessage>(Marshal::GetFunctionPointerForDelegate(linearAccelerationDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_earth_acceleration_callback(connection, static_cast<ximu3::XIMU3_CallbackEarthAccelerationMessage>(Marshal::GetFunctionPointerForDelegate(earthAccelerationDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_ahrs_status_callback(connection, static_cast<ximu3::XIMU3_CallbackAhrsStatusMessage>(Marshal::GetFunctionPointerForDelegate(ahrsStatusDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_high_g_accelerometer_callback(connection, static_cast<ximu3::XIMU3_CallbackHighGAccelerometerMessage>(Marshal::GetFunctionPointerForDelegate(highGAccelerometerDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_temperature_callback(connection, static_cast<ximu3::XIMU3_CallbackTemperatureMessage>(Marshal::GetFunctionPointerForDelegate(temperatureDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_battery_callback(connection, static_cast<ximu3::XIMU3_CallbackBatteryMessage>(Marshal::GetFunctionPointerForDelegate(batteryDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_rssi_callback(connection, static_cast<ximu3::XIMU3_CallbackRssiMessage>(Marshal::GetFunctionPointerForDelegate(rssiDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_serial_accessory_callback(connection, static_cast<ximu3::XIMU3_CallbackSerialAccessoryMessage>(Marshal::GetFunctionPointerForDelegate(serialAccessoryDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_notification_callback(connection, static_cast<ximu3::XIMU3_CallbackNotificationMessage>(Marshal::GetFunctionPointerForDelegate(notificationDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            ximu3::XIMU3_connection_add_error_callback(connection, static_cast<ximu3::XIMU3_CallbackErrorMessage>(Marshal::GetFunctionPointerForDelegate(errorDelegate).ToPointer()), GCHandle::ToIntPtr(thisHandle).ToPointer());
            // End of code block #1 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
        }

        ~Connection() {
            ximu3::XIMU3_connection_free(connection);
        }

        Result Open()
        {
            return (Result)ximu3::XIMU3_connection_open(connection);
        }

        void OpenAsync(EventHandler<OpenEventArgs^>^ openEvent) {
            const auto callback = static_cast<ximu3::XIMU3_CallbackResult>(Marshal::GetFunctionPointerForDelegate(openDelegate).ToPointer());
            const auto context = GCHandle::ToIntPtr(GCHandle::Alloc(gcnew WrappedOpenEvent(this, openEvent))).ToPointer();
            ximu3::XIMU3_connection_open_async(connection, callback, context);
        }

        void Close()
        {
            ximu3::XIMU3_connection_close(connection);
        }

        PingResponse^ Ping()
        {
            return gcnew PingResponse(ximu3::XIMU3_connection_ping(connection));
        }

        array<String^>^ SendCommands(array<String^>^ commands, int retries, int timeout)
        {
            const auto charPtrVector = ToCharPtrVector(commands);
            return Helpers::ToArrayAndFree(ximu3::XIMU3_connection_send_commands(connection, charPtrVector.data(), (uint32_t)charPtrVector.size(), retries, timeout));
        }

        void SendCommandsAsync(array<String^>^ commands, int retries, int timeout, EventHandler<SendCommandsEventArgs^>^ sendCommandsEvent)
        {
            const auto charPtrVector = ToCharPtrVector(commands);
            const auto callback = static_cast<ximu3::XIMU3_CallbackCharArrays>(Marshal::GetFunctionPointerForDelegate(sendCommandsDelegate).ToPointer());
            const auto context = GCHandle::ToIntPtr(GCHandle::Alloc(gcnew WrappedSendCommandsEvent(this, sendCommandsEvent))).ToPointer();
            ximu3::XIMU3_connection_send_commands_async(connection, charPtrVector.data(), (uint32_t)charPtrVector.size(), retries, timeout, callback, context);
        }

        ConnectionInfo^ GetInfo()
        {
            switch (ximu3::XIMU3_connection_get_type(connection))
            {
            case ximu3::XIMU3_ConnectionTypeUsb:
                return gcnew UsbConnectionInfo(&ximu3::XIMU3_connection_get_info_usb(connection));
            case ximu3::XIMU3_ConnectionTypeSerial:
                return gcnew SerialConnectionInfo(&ximu3::XIMU3_connection_get_info_serial(connection));
            case ximu3::XIMU3_ConnectionTypeTcp:
                return gcnew TcpConnectionInfo(&ximu3::XIMU3_connection_get_info_tcp(connection));
            case ximu3::XIMU3_ConnectionTypeUdp:
                return gcnew UdpConnectionInfo(&ximu3::XIMU3_connection_get_info_udp(connection));
            case ximu3::XIMU3_ConnectionTypeBluetooth:
                return gcnew BluetoothConnectionInfo(&ximu3::XIMU3_connection_get_info_bluetooth(connection));
            case ximu3::XIMU3_ConnectionTypeFile:
                return gcnew FileConnectionInfo(&ximu3::XIMU3_connection_get_info_file(connection));
            }
            return nullptr;
        }

        Statistics^ GetStatistics()
        {
            return gcnew Statistics(ximu3::XIMU3_connection_get_statistics(connection));
        }

    internal:
        ximu3::XIMU3_Connection* connection;

    private:
        GCHandle thisHandle = GCHandle::Alloc(this, GCHandleType::Weak);

        static ximu3::XIMU3_Connection* NewConnection(ConnectionInfo^ connectionInfo) {
            if (UsbConnectionInfo^ castConnectionInfo = dynamic_cast <UsbConnectionInfo^>(connectionInfo)) {
                return ximu3::XIMU3_connection_new_usb(*castConnectionInfo->connectionInfo);
            }
            if (SerialConnectionInfo^ castConnectionInfo = dynamic_cast <SerialConnectionInfo^>(connectionInfo)) {
                return ximu3::XIMU3_connection_new_serial(*castConnectionInfo->connectionInfo);
            }
            if (TcpConnectionInfo^ castConnectionInfo = dynamic_cast <TcpConnectionInfo^>(connectionInfo)) {
                return ximu3::XIMU3_connection_new_tcp(*castConnectionInfo->connectionInfo);
            }
            if (UdpConnectionInfo^ castConnectionInfo = dynamic_cast <UdpConnectionInfo^>(connectionInfo)) {
                return ximu3::XIMU3_connection_new_udp(*castConnectionInfo->connectionInfo);
            }
            if (BluetoothConnectionInfo^ castConnectionInfo = dynamic_cast <BluetoothConnectionInfo^>(connectionInfo)) {
                return ximu3::XIMU3_connection_new_bluetooth(*castConnectionInfo->connectionInfo);
            }
            if (FileConnectionInfo^ castConnectionInfo = dynamic_cast <FileConnectionInfo^>(connectionInfo)) {
                return ximu3::XIMU3_connection_new_file(*castConnectionInfo->connectionInfo);
            }
            return nullptr;
        }

        static std::vector<const char*> ToCharPtrVector(array<String^>^ stringArray) {
            std::vector<const char*> charPtrVector(stringArray->Length);
            for (size_t index = 0; index < charPtrVector.size(); index++)
            {
                charPtrVector[index] = Helpers::ToCharPtr(stringArray[(int)index]);
            }
            return charPtrVector;
        }

        ref class WrappedOpenEvent
        {
        public:
            Object^ sender;
            EventHandler<OpenEventArgs^>^ openEvent;

            WrappedOpenEvent(Object^ sender, EventHandler<OpenEventArgs^>^ openEvent)
                : sender(sender), openEvent(openEvent)
            {
            }
        };

        delegate void OpenDelegate(ximu3::XIMU3_Result data, void* context);

        static void OpenCallback(ximu3::XIMU3_Result data, void* context)
        {
            const auto wrapped = static_cast<WrappedOpenEvent^>(GCHandle::FromIntPtr(IntPtr(context)).Target);
            wrapped->openEvent(wrapped->sender, gcnew OpenEventArgs((Result)data));
            GCHandle::FromIntPtr(IntPtr(context)).Free();
        }

        const OpenDelegate^ openDelegate = gcnew OpenDelegate(OpenCallback);

        ref class WrappedSendCommandsEvent
        {
        public:
            Object^ sender;
            EventHandler<SendCommandsEventArgs^>^ sendCommandsEvent;

            WrappedSendCommandsEvent(Object^ sender, EventHandler<SendCommandsEventArgs^>^ sendCommandsEvent)
                : sender(sender), sendCommandsEvent(sendCommandsEvent)
            {
            }
        };

        delegate void SendCommandsDelegate(ximu3::XIMU3_CharArrays data, void* context);

        static void SendCommandsCallback(ximu3::XIMU3_CharArrays data, void* context)
        {
            const auto wrapped = static_cast<WrappedSendCommandsEvent^>(GCHandle::FromIntPtr(IntPtr(context)).Target);
            wrapped->sendCommandsEvent(wrapped->sender, gcnew SendCommandsEventArgs(Helpers::ToArrayAndFree(data)));
            GCHandle::FromIntPtr(IntPtr(context)).Free();
        }

        const SendCommandsDelegate^ sendCommandsDelegate = gcnew SendCommandsDelegate(SendCommandsCallback);

        delegate void DecodeErrorDelegate(ximu3::XIMU3_DecodeError data, void* context);

        static void DecodeErrorCallback(ximu3::XIMU3_DecodeError data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->DecodeErrorEvent(sender, gcnew DecodeErrorEventArgs((DecodeError)data));
        }

        const DecodeErrorDelegate^ decodeErrorDelegate = gcnew DecodeErrorDelegate(DecodeErrorCallback);

        delegate void StatisticsDelegate(ximu3::XIMU3_Statistics data, void* context);

        static void StatisticsCallback(ximu3::XIMU3_Statistics data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->StatisticsEvent(sender, gcnew StatisticsEventArgs(gcnew Statistics(data)));
        }

        const StatisticsDelegate^ statisticsDelegate = gcnew StatisticsDelegate(StatisticsCallback);

        // Start of code block #2 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py

        delegate void InertialDelegate(ximu3::XIMU3_InertialMessage data, void* context);

        static void InertialCallback(ximu3::XIMU3_InertialMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->InertialEvent(sender, gcnew InertialEventArgs(gcnew InertialMessage(data)));
        }

        const InertialDelegate^ inertialDelegate = gcnew InertialDelegate(InertialCallback);

        delegate void MagnetometerDelegate(ximu3::XIMU3_MagnetometerMessage data, void* context);

        static void MagnetometerCallback(ximu3::XIMU3_MagnetometerMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->MagnetometerEvent(sender, gcnew MagnetometerEventArgs(gcnew MagnetometerMessage(data)));
        }

        const MagnetometerDelegate^ magnetometerDelegate = gcnew MagnetometerDelegate(MagnetometerCallback);

        delegate void QuaternionDelegate(ximu3::XIMU3_QuaternionMessage data, void* context);

        static void QuaternionCallback(ximu3::XIMU3_QuaternionMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->QuaternionEvent(sender, gcnew QuaternionEventArgs(gcnew QuaternionMessage(data)));
        }

        const QuaternionDelegate^ quaternionDelegate = gcnew QuaternionDelegate(QuaternionCallback);

        delegate void RotationMatrixDelegate(ximu3::XIMU3_RotationMatrixMessage data, void* context);

        static void RotationMatrixCallback(ximu3::XIMU3_RotationMatrixMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->RotationMatrixEvent(sender, gcnew RotationMatrixEventArgs(gcnew RotationMatrixMessage(data)));
        }

        const RotationMatrixDelegate^ rotationMatrixDelegate = gcnew RotationMatrixDelegate(RotationMatrixCallback);

        delegate void EulerAnglesDelegate(ximu3::XIMU3_EulerAnglesMessage data, void* context);

        static void EulerAnglesCallback(ximu3::XIMU3_EulerAnglesMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->EulerAnglesEvent(sender, gcnew EulerAnglesEventArgs(gcnew EulerAnglesMessage(data)));
        }

        const EulerAnglesDelegate^ eulerAnglesDelegate = gcnew EulerAnglesDelegate(EulerAnglesCallback);

        delegate void LinearAccelerationDelegate(ximu3::XIMU3_LinearAccelerationMessage data, void* context);

        static void LinearAccelerationCallback(ximu3::XIMU3_LinearAccelerationMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->LinearAccelerationEvent(sender, gcnew LinearAccelerationEventArgs(gcnew LinearAccelerationMessage(data)));
        }

        const LinearAccelerationDelegate^ linearAccelerationDelegate = gcnew LinearAccelerationDelegate(LinearAccelerationCallback);

        delegate void EarthAccelerationDelegate(ximu3::XIMU3_EarthAccelerationMessage data, void* context);

        static void EarthAccelerationCallback(ximu3::XIMU3_EarthAccelerationMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->EarthAccelerationEvent(sender, gcnew EarthAccelerationEventArgs(gcnew EarthAccelerationMessage(data)));
        }

        const EarthAccelerationDelegate^ earthAccelerationDelegate = gcnew EarthAccelerationDelegate(EarthAccelerationCallback);

        delegate void AhrsStatusDelegate(ximu3::XIMU3_AhrsStatusMessage data, void* context);

        static void AhrsStatusCallback(ximu3::XIMU3_AhrsStatusMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->AhrsStatusEvent(sender, gcnew AhrsStatusEventArgs(gcnew AhrsStatusMessage(data)));
        }

        const AhrsStatusDelegate^ ahrsStatusDelegate = gcnew AhrsStatusDelegate(AhrsStatusCallback);

        delegate void HighGAccelerometerDelegate(ximu3::XIMU3_HighGAccelerometerMessage data, void* context);

        static void HighGAccelerometerCallback(ximu3::XIMU3_HighGAccelerometerMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->HighGAccelerometerEvent(sender, gcnew HighGAccelerometerEventArgs(gcnew HighGAccelerometerMessage(data)));
        }

        const HighGAccelerometerDelegate^ highGAccelerometerDelegate = gcnew HighGAccelerometerDelegate(HighGAccelerometerCallback);

        delegate void TemperatureDelegate(ximu3::XIMU3_TemperatureMessage data, void* context);

        static void TemperatureCallback(ximu3::XIMU3_TemperatureMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->TemperatureEvent(sender, gcnew TemperatureEventArgs(gcnew TemperatureMessage(data)));
        }

        const TemperatureDelegate^ temperatureDelegate = gcnew TemperatureDelegate(TemperatureCallback);

        delegate void BatteryDelegate(ximu3::XIMU3_BatteryMessage data, void* context);

        static void BatteryCallback(ximu3::XIMU3_BatteryMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->BatteryEvent(sender, gcnew BatteryEventArgs(gcnew BatteryMessage(data)));
        }

        const BatteryDelegate^ batteryDelegate = gcnew BatteryDelegate(BatteryCallback);

        delegate void RssiDelegate(ximu3::XIMU3_RssiMessage data, void* context);

        static void RssiCallback(ximu3::XIMU3_RssiMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->RssiEvent(sender, gcnew RssiEventArgs(gcnew RssiMessage(data)));
        }

        const RssiDelegate^ rssiDelegate = gcnew RssiDelegate(RssiCallback);

        delegate void SerialAccessoryDelegate(ximu3::XIMU3_SerialAccessoryMessage data, void* context);

        static void SerialAccessoryCallback(ximu3::XIMU3_SerialAccessoryMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->SerialAccessoryEvent(sender, gcnew SerialAccessoryEventArgs(gcnew SerialAccessoryMessage(data)));
        }

        const SerialAccessoryDelegate^ serialAccessoryDelegate = gcnew SerialAccessoryDelegate(SerialAccessoryCallback);

        delegate void NotificationDelegate(ximu3::XIMU3_NotificationMessage data, void* context);

        static void NotificationCallback(ximu3::XIMU3_NotificationMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->NotificationEvent(sender, gcnew NotificationEventArgs(gcnew NotificationMessage(data)));
        }

        const NotificationDelegate^ notificationDelegate = gcnew NotificationDelegate(NotificationCallback);

        delegate void ErrorDelegate(ximu3::XIMU3_ErrorMessage data, void* context);

        static void ErrorCallback(ximu3::XIMU3_ErrorMessage data, void* context)
        {
            auto sender = GCHandle::FromIntPtr(IntPtr(context)).Target;
            static_cast<Connection^>(sender)->ErrorEvent(sender, gcnew ErrorEventArgs(gcnew ErrorMessage(data)));
        }

        const ErrorDelegate^ errorDelegate = gcnew ErrorDelegate(ErrorCallback);
        // End of code block #2 generated by x-IMU3-API/Rust/src/data_messages/generate_data_messages.py
    };
}
